// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum FeatureStatus {
    OPEN
    PLANNED
    IN_PROGRESS
    COMPLETED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

model User {
    id              String           @id @default(uuid())
    email           String           @unique
    password        String
    name            String?
    role            UserRole         @default(USER)
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @updatedAt @map("updated_at")
    featureRequests FeatureRequest[]
    votes           Vote[]
    Comment         Comment[]
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    Feature         Feature[]

    @@map("users")
}

model FeatureRequest {
    id            String        @id @default(cuid())
    title         String
    description   String
    justification String
    priority      Priority      @default(MEDIUM)
    status        FeatureStatus @default(OPEN)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    userId        String
    user          User          @relation(fields: [userId], references: [id])
    votes         Vote[]
    attachments   String        @default("[]")
    Comment       Comment[]

    @@index([userId])
}

model Vote {
    id               String         @id @default(uuid())
    userId           String         @map("user_id")
    featureRequestId String         @map("feature_request_id")
    createdAt        DateTime       @default(now()) @map("created_at")
    user             User           @relation(fields: [userId], references: [id])
    featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])
    Feature          Feature?       @relation(fields: [featureId], references: [id])
    featureId        String?

    @@unique([userId, featureRequestId])
    @@map("votes")
}

// Optional: Comments model for stretch goal
model Comment {
    id               String         @id @default(uuid())
    content          String         @db.Text
    userId           String         @map("user_id")
    featureRequestId String         @map("feature_request_id")
    createdAt        DateTime       @default(now()) @map("created_at")
    updatedAt        DateTime       @updatedAt @map("updated_at")
    user             User           @relation(fields: [userId], references: [id])
    featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])

    @@map("comments")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feature {
    id          String   @id @default(cuid())
    title       String
    description String
    status      String   @default("pending")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    votes       Vote[]
}
